name: Weekly issue with vulnerabilities

on:
  # schedule:
    # - cron: "0 9 * * 1"
  workflow_dispatch:
    inputs:
      repos:
        description: 'Repositories (comma separated)'
        required: true
        default: alexauron/astro-tutorial,alexauron/Head-First-Design-Patterns

      assignees:
        description: 'Assignees (comma separated)'
        required: false
        default: alexauron

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: generate-matrix
        id: generate-matrix
        run: |
          repos_array=$(echo '"${{ inputs.repos }}"' | jq -c '. | split(",") | map(select(length > 0))')
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          echo "$repos_array" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
  create-vulnerability-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      security-events: read
    
    # strategy:
      # matrix: ${{ fromJSON(needs.init.outputs.repos) }}


    steps:
      - name: Print received repos output
        run: |
          echo "Output received from 'init' job:"
          echo "${{ needs.init.outputs.repos }}"
  
      - name: Get today
        id: date
        run: echo "today=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        
      - name: Fetch Dependabot vulnerabilities for ${{ matrix.repo }}
        id: dependabot
        run: |
          critical_alerts=$(gh api repos/${{ matrix.repo }}/dependabot/alerts \
            --paginate -q '.[] | select(.security_vulnerability.severity=="critical" and .state=="open") | "- [ ] " + .html_url')
          
          high_alerts=$(gh api repos/${{ matrix.repo }}/dependabot/alerts \
            --paginate -q '.[] | select(.security_vulnerability.severity=="high" and .state=="open") | "- [ ] " + .html_url')

          {
            echo "alerts<<EOF"
            echo "### ðŸ”´ Critical"
            if [ -z "$critical_alerts" ]; then
              echo "âœ… None found"
            else
              echo "$critical_alerts"
            fi
            echo ""
            echo "### ðŸŸ  High"
            if [ -z "$high_alerts" ]; then
              echo "âœ… None found"
            else
              echo "$high_alerts"
            fi
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Fetch CodeQL vulnerabilities for ${{ matrix.repo }}
        id: codeql
        run: |
          critical_alerts=$(gh api repos/${{ matrix.repo }}/code-scanning/alerts \
            --paginate -q '.[] | select(.rule.security_severity_level=="critical" and .state=="open") | "- [ ] " + .html_url')

          high_alerts=$(gh api repos/${{ matrix.repo }}/code-scanning/alerts \
            --paginate -q '.[] | select(.rule.security_severity_level=="high" and .state=="open") | "- [ ] " + .html_url')
          
          {
            echo "alerts<<EOF"
            echo "### ðŸ”´ Critical"
            if [ -z "$critical_alerts" ]; then
              echo "âœ… None found"
            else
              echo "$critical_alerts"
            fi
            echo ""
            echo "### ðŸŸ  High"
            if [ -z "$high_alerts" ]; then
              echo "âœ… None found"
            else
              echo "$high_alerts"
            fi
            echo "EOF"
          } >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PAT }}

      - name: Create weekly issue for ${{ matrix.repo }}
        run: |
          body=$(cat <<EOF
          ### ðŸ¤– Dependabot vulnerabilities
          ${{ steps.dependabot.outputs.alerts }}

          ### ðŸ”’ CodeQL vulnerabilities
          ${{ steps.codeql.outputs.alerts }}
          EOF
          )
          
          gh issue create \
            --repo ${{ matrix.repo }} \
            --title "[tech-debt] ${{ matrix.repo }} - ${{ steps.date.outputs.today }}" \
            --body "$body" \
            --label "bug" \
            --milestone "1.0.0" \
            --assignee "${{ github.event.inputs.assignees }}"
        env:
          GH_TOKEN: ${{ secrets.PAT }}
